// Copyright 2020 by codex.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "hcc/pb";

package RpcCello;

import public "msgtype.proto";

service Cello {
  rpc VolumeHandler (ReqVolumeHandler) returns (ResVolumeHandler);
  rpc PoolHandler (ReqPoolHandler) returns (ResPoolHandler);
  rpc GetVolumeList (ReqGetVolumeList) returns (ResGetVolumeList);
  rpc GetPoolList (ReqGetPoolList) returns (ResGetPoolList);
  rpc GetLunList (ReqGetLunList) returns (ResGetLunList);
  rpc MountHandler (ReqMountHandler) returns (ResMountHandler);
}

message ReqVolumeHandler {
  MsgType.Volume volume = 1;
  MsgType.Group group = 2;
}

message ResVolumeHandler {
  MsgType.Volume volume = 1;
  MsgType.HccErrorStack hccErrorStack = 2;
}

message ReqPoolHandler {
  MsgType.Pool pool = 1;
  MsgType.Group group = 2;
}

message ResPoolHandler {
  MsgType.Pool pool = 1;
  MsgType.HccErrorStack hccErrorStack = 2;
}

message ReqGetVolumeList {
  MsgType.Volume volume = 1;
  MsgType.Group group = 2;
  int64 row = 3;
  int64 page = 4;
}

message ResGetVolumeList {
  repeated MsgType.Volume volume = 1;
  MsgType.HccErrorStack hccErrorStack = 2;
}

message ReqGetPoolList {
  MsgType.Pool pool = 1;
  MsgType.Group group = 2;
  int64 row = 3;
  int64 page = 4;
}

message ResGetPoolList {
  repeated  MsgType.Pool pool = 1;
  MsgType.HccErrorStack hccErrorStack = 2;
}



message ReqVolumeQuotaHandler {
  MsgType.VolumeQuota quota=1;
  MsgType.Group group = 2;
  int64 row = 3;
  int64 page = 4;
}

message ResVolumeQuotaHandler {
  repeated  MsgType.VolumeQuota quota = 1;
  MsgType.HccErrorStack hccErrorStack = 2;
}



message ReqGetLunList {
  MsgType.Volume volume= 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetLunList {
  repeated MsgType.Lun lun = 1;
  string targetName = 2;
  MsgType.HccErrorStack hccErrorStack = 3;
}

message ReqMountHandler {
  MsgType.Volume volume= 1;
  int64 row = 2;
  int64 page = 3;
}

message ResMountHandler {
  bool result = 1; 
  string errorMsg = 2;
  MsgType.HccErrorStack hccErrorStack = 3;
}
