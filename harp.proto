syntax = "proto3";

package RpcHarp;

import public "msgType.proto";

service Harp {
  // Subnet
  rpc CreateSubnet (ReqCreateSubnet) returns (ResCreateSubnet) {}
  rpc GetSubnet (ReqGetSubnet) returns (ResGetSubnet) {}
  rpc GetSubnetList (ReqGetSubnetList) returns (ResGetSubnetList) {}
  rpc GetSubnetNum (MsgType.Empty) returns (ResGetSubnetNum) {}
  rpc UpdateSubnet (ReqUpdateSubnet) returns (ResUpdateSubnet) {}
  rpc DeleteSubnet (ReqDeleteSubnet) returns (ResDeleteSubnet) {}
  // AdaptiveIP
  rpc CreateAdaptiveIPSetting (ReqCreateAdaptiveIPSetting) returns (ResCreateAdaptiveIPSetting) {}
  rpc GetAdaptiveIPSetting (MsgType.Empty) returns (ResGetAdaptiveIPSetting) {}
  rpc GetAdaptiveIPAvailableIPList (MsgType.Empty) returns (ResGetAdaptiveIPAvailableIPList) {}
  rpc CreateAdaptiveIPServer (ReqCreateAdaptiveIPServer) returns (ResCreateAdaptiveIPServer) {}
  rpc GetAdaptiveIPServer (ReqGetAdaptiveIPServer) returns (ResGetAdaptiveIPServer) {}
  rpc GetAdaptiveIPServerList (ReqGetAdaptiveIPServerList) returns (ResGetAdaptiveIPServerList) {}
  rpc GetAdaptiveIPServerNum (MsgType.Empty) returns (ResGetAdaptiveIPServerNum) {}
  rpc DeleteAdaptiveIPServer (ReqDeleteAdaptiveIPServer) returns (ResDeleteAdaptiveIPServer) {}
  // DHCPD
  rpc CreateDHPCDConf (ReqCreateDHPCDConf) returns (ResCreateDHPCDConf) {}
}

// Subnet
message ReqCreateSubnet {
  MsgType.Subnet subnet = 1;
}

message ResCreateSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqGetSubnet {
  string uuid = 1;
}

message ResGetSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqGetSubnetList {
  MsgType.Subnet subnet = 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetSubnetList {
  repeated MsgType.Subnet subnet = 1;
}

message ResGetSubnetNum {
  int64 num = 1;
}

message ReqUpdateSubnet {
  MsgType.Subnet subnet = 1;
}

message ResUpdateSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqDeleteSubnet {
  string uuid = 1;
}

message ResDeleteSubnet {
  string uuid = 1;
}

// AdaptiveIP
message ReqCreateAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptive_setting = 1;
}

message ResCreateAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptive_setting = 1;
}

message ResGetAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptive_setting = 1;
}

message ResGetAdaptiveIPAvailableIPList {
  MsgType.AdaptiveIPAvailableIPList adaptiveip_available_ip_list = 1;
}

message ReqCreateAdaptiveIPServer {
  string server_uuid = 1;
  string public_ip = 2;
}

message ResCreateAdaptiveIPServer {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ReqGetAdaptiveIPServer {
  string uuid = 1;
}

message ResGetAdaptiveIPServer {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ReqGetAdaptiveIPServerList {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetAdaptiveIPServerList {
  repeated MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ResGetAdaptiveIPServerNum {
  int64 num = 1;
}

message ReqDeleteAdaptiveIPServer {
  string uuid = 1;
}

message ResDeleteAdaptiveIPServer {
  string uuid = 1;
}

// DHCPD
message ReqCreateDHPCDConf {
  string subnet_uuid = 1;
  string node_uuids = 2;
}

message ResCreateDHPCDConf {
  string result = 1;
}