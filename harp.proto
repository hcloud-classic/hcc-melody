syntax = "proto3";
option go_package = "hcc/harp";
package pb;
import "google/protobuf/timestamp.proto";

service Harp {
  // Subnet
  rpc CreateSubnet (Subnet) returns (Subnet) {}
  rpc GetSubnet (UUID) returns (Subnet) {}
  rpc GetSubnetList (GetSubnetListRequest) returns (SubnetList) {}
  rpc GetSubnetNum (empty) returns (SubnetNum) {}
  rpc UpdateSubnet (Subnet) returns (Subnet) {}
  rpc DeleteSubnet (UUID) returns (UUID) {}

  // AdaptiveIP
  rpc CreateAdaptiveIPSetting (AdaptiveIPSetting) returns (AdaptiveIPSetting) {}
  rpc GetAdaptiveIPSetting (empty) returns (AdaptiveIPSetting) {}
  rpc GetAdaptiveIPAvailableIPList (empty) returns (AdaptiveIPAvailableIPList) {}
  rpc CreateAdaptiveIPServer (CreateAdaptiveIPServerRequest) returns (AdaptiveIPServer) {}
  rpc GetAdaptiveIPServer (UUID) returns (AdaptiveIPServer) {}
  rpc GetAdaptiveIPServerList (GetAdaptiveIPServerListRequest) returns (AdaptiveIPServerList) {}
  rpc GetAdaptiveIPServerNum (empty) returns (AdaptiveIPServerNum) {}
  rpc DeleteAdaptiveIPServer (UUID) returns (UUID) {}

  // DHCPD
  rpc CreateDHPCDConf (CreateDHPCDConfRequest) returns (Result) {}
}

message empty {}

message UUID {
  string uuid = 1;
}

message Result {
  string result = 1;
}

// Subnet
message Subnet {
  UUID uuid = 1;
  string network_ip = 2;
  string netmask = 3;
  string gateway = 4;
  string next_server = 5;
  string name_server = 6;
  string domain_name = 7;
  string server_uuid = 8;
  string leader_node_uuid = 9;
  string os = 10;
  string subnet_name = 11;
  google.protobuf.Timestamp created_at = 12;
}

message SubnetList {
  repeated Subnet subnet = 1;
}

message GetSubnetListRequest {
  Subnet subnet = 1;
  int64 row = 2;
  int64 page = 3;
}

message SubnetNum {
  int64 num = 1;
}

// AdaptiveIP
message AdaptiveIPSetting {
  string ext_iface_ip_address = 1;
  string netmask = 2;
  string gateway = 3;
  string start_ip_address = 4;
  string end_ip_address = 5;
}

message AdaptiveIPAvailableIPList {
  repeated string available_ip = 1;
}

message AdaptiveIPServer {
  string server_uuid = 1;
  string public_ip = 2;
  string private_ip = 3;
  string private_gateway = 4;
  string status = 5;
  string created_at = 6;
}

message AdaptiveIPServerList {
  repeated AdaptiveIPServer adaptive_ip_server = 1;
}

message CreateAdaptiveIPServerRequest {
  string server_uuid = 1;
  string public_ip = 2;
}

message GetAdaptiveIPServerListRequest {
  AdaptiveIPServer adaptive_ip_server = 1;
  int64 row = 2;
  int64 page = 3;
}

message AdaptiveIPServerNum {
  int64 num = 1;
}

// DHCPD
message CreateDHPCDConfRequest {
  string subnet_uuid = 1;
  string node_uuids = 2;
}
