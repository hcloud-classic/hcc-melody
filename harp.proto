// Copyright 2020 by ish.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package RpcHarp;

import public "msgType.proto";
import "graphql.proto";

service Harp {
  option (graphql.service) = {
    host: "192.168.110.10:7400"
    insecure: true
  };

  // Subnet
  rpc CreateSubnet (ReqCreateSubnet) returns (ResCreateSubnet) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_subnet"
    };
  }
  rpc GetSubnet (ReqGetSubnet) returns (ResGetSubnet) {
    option (graphql.schema) = {
      type: QUERY
      name: "subnet"
    };
  }
  rpc GetSubnetByServer (ReqGetSubnetByServer) returns (ResGetSubnetByServer) {}
  rpc GetSubnetList (ReqGetSubnetList) returns (ResGetSubnetList) {
    option (graphql.schema) = {
      type: QUERY
      name: "subnet_list"
    };
  }
  rpc GetSubnetNum (MsgType.Empty) returns (ResGetSubnetNum) {
    option (graphql.schema) = {
      type: QUERY
      name: "subnet_num"
    };
  }
  rpc UpdateSubnet (ReqUpdateSubnet) returns (ResUpdateSubnet) {
    option (graphql.schema) = {
      type: MUTATION
      name: "update_subnet"
    };
  }
  rpc DeleteSubnet (ReqDeleteSubnet) returns (ResDeleteSubnet) {
    option (graphql.schema) = {
      type: MUTATION
      name: "delete_subnet"
    };
  }
  // AdaptiveIP
  rpc CreateAdaptiveIPSetting (ReqCreateAdaptiveIPSetting) returns (ResCreateAdaptiveIPSetting) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_adaptiveip_setting"
    };
  }
  rpc GetAdaptiveIPSetting (MsgType.Empty) returns (ResGetAdaptiveIPSetting) {
    option (graphql.schema) = {
      type: QUERY
      name: "adaptiveip_setting"
    };
  }
  rpc GetAdaptiveIPAvailableIPList (MsgType.Empty) returns (ResGetAdaptiveIPAvailableIPList) {
    option (graphql.schema) = {
      type: QUERY
      name: "adaptiveip_availableip_list"
    };
  }
  rpc CreateAdaptiveIPServer (ReqCreateAdaptiveIPServer) returns (ResCreateAdaptiveIPServer) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_adaptiveip_server"
    };
  }
  rpc GetAdaptiveIPServer (ReqGetAdaptiveIPServer) returns (ResGetAdaptiveIPServer) {
    option (graphql.schema) = {
      type: QUERY
      name: "adaptiveip_server"
    };
  }
  rpc GetAdaptiveIPServerList (ReqGetAdaptiveIPServerList) returns (ResGetAdaptiveIPServerList) {
    option (graphql.schema) = {
      type: QUERY
      name: "adaptiveip_server_list"
    };
  }
  rpc GetAdaptiveIPServerNum (MsgType.Empty) returns (ResGetAdaptiveIPServerNum) {
    option (graphql.schema) = {
      type: QUERY
      name: "adaptiveip_server_num"
    };
  }
  rpc DeleteAdaptiveIPServer (ReqDeleteAdaptiveIPServer) returns (ResDeleteAdaptiveIPServer) {
    option (graphql.schema) = {
      type: MUTATION
      name: "delete_adaptiveip_server"
    };
  }
  // DHCPD
  rpc CreateDHPCDConf (ReqCreateDHPCDConf) returns (ResCreateDHPCDConf) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_dhcpd_conf"
    };
  }
  rpc DeleteDHPCDConf (ReqDeleteDHPCDConf) returns (ResDeleteDHPCDConf) {
    option (graphql.schema) = {
      type: MUTATION
      name: "delete_dhcpd_conf"
    };
  }
}

// Subnet
message ReqCreateSubnet {
  MsgType.Subnet subnet = 1;
}

message ResCreateSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqGetSubnet {
  string UUID = 1;
}

message ResGetSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqGetSubnetByServer {
  string serverUUID = 1;
}

message ResGetSubnetByServer {
  MsgType.Subnet subnet = 1;
  repeated MsgType.HccError hccErrorStack = 2;
}

message ReqGetSubnetList {
  MsgType.Subnet subnet = 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetSubnetList {
  repeated MsgType.Subnet subnet = 1;
}

message ResGetSubnetNum {
  int64 num = 1;
}

message ReqUpdateSubnet {
  MsgType.Subnet subnet = 1;
}

message ResUpdateSubnet {
  MsgType.Subnet subnet = 1;
}

message ReqDeleteSubnet {
  string UUID = 1;
}

message ResDeleteSubnet {
  string UUID = 1;
}

// AdaptiveIP
message ReqCreateAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptiveip_setting = 1;
}

message ResCreateAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptiveip_setting = 1;
}

message ResGetAdaptiveIPSetting {
  MsgType.AdaptiveIPSetting adaptiveip_setting = 1;
}

message ResGetAdaptiveIPAvailableIPList {
  MsgType.AdaptiveIPAvailableIPList adaptiveip_availableip_list = 1;
}

message ReqCreateAdaptiveIPServer {
  string serverUUID = 1;
  string publicIP = 2;
}

message ResCreateAdaptiveIPServer {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ReqGetAdaptiveIPServer {
  string serverUUID = 1;
}

message ResGetAdaptiveIPServer {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ReqGetAdaptiveIPServerList {
  MsgType.AdaptiveIPServer adaptiveip_server = 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetAdaptiveIPServerList {
  repeated MsgType.AdaptiveIPServer adaptiveip_server = 1;
}

message ResGetAdaptiveIPServerNum {
  int64 num = 1;
}

message ReqDeleteAdaptiveIPServer {
  string serverUUID = 1;
}

message ResDeleteAdaptiveIPServer {
  string serverUUID = 1;
}

// DHCPD
message ReqCreateDHPCDConf {
  string subnetUUID = 1;
  string nodeUUIDs = 2;
}

message ResCreateDHPCDConf {
  string result = 1;
}

message ReqDeleteDHPCDConf {
  string subnetUUID = 1;
}

message ResDeleteDHPCDConf {
  string result = 1;
}
