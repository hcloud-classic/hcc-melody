// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package MsgType;
import "google/protobuf/timestamp.proto";
//import "google/protobuf/any.proto";

message Empty {}

// Flute
message Node{
  string    UUID = 1;
  string    bmc_mac_addr = 2;
  string    bmc_ip = 3;
  string    PXE_mac_addr = 4;
  string    status = 5;
  string    description = 6;
  int32     CPU_cores = 7;
  int32     memory = 8;
  int32     active = 9;
  google.protobuf.Timestamp create_at = 10;
  bool      force_off = 11;
}

message NodeDetail {
  string    node_UUID = 1;
  string    CPU_model = 2;
  int32     CPU_processor = 3;
  int32     CPU_thread = 4;
}

// Violin
message Server {
  string    UUID = 1;
  string    subnet_UUID = 2;
  string    OS = 3;
  string    server_name = 4;
  string    server_desc = 5;
  int32     CPU = 6;
  int32     memory = 7;
  int32     disk_size = 8;
  string    status = 9;
  string    user_UUID = 10;
  google.protobuf.Timestamp create_at = 11;
}

message ServerNode {
  string    UUID = 1;
  string    server_UUID = 2;
  string    node_UUID = 3;
  google.protobuf.Timestamp create_at = 4;
}

message VNC {
  string    session_id = 1;
  string    server_UUID = 2;
  enum VNCAction {
    CREATE = 0;
    DELETE = 1;
  }
  VNCAction action = 3;
}

// Cello
message Volume {
  string    UUID = 1;
  string    size = 2;
  string    filesystem = 3;
  string    server_UUID = 4;
  string    use_type = 5;
  string    user_UUID = 6;
  google.protobuf.Timestamp create_at = 7;
  string    network_IP = 8;
}

message VolumeAttachment {
  string    UUID = 1;
  string    volume_UUID = 2;
  string    server_UUID = 3;
  google.protobuf.Timestamp create_at = 4;
  google.protobuf.Timestamp update_at = 5;
}

message Ipmi {
  string    UUID = 1;
}

// Harp
message AdaptiveIP {
  string    ext_iface_IP_address = 1;
  string    netmask = 2;
  string    gateway_address = 3;
  string    strat_IP_address = 4;
  string    end_IP_address = 5;
}

message AdaptiveIPServer {
  string    server_UUID = 1;
  string    public_IP = 2;
  string    private_IP = 3;
  string    private_gateway = 4;
  string    status = 5;
  google.protobuf.Timestamp create_at = 6;
}

message Subnet {
  string    UUID = 1;
  string    network_IP = 2;
  string    netmask = 3;
  string    gateway = 4;
  string    next_server = 5;
  string    name_server = 6;
  string    domain_name = 7;
  string    server_UUID = 8;
  string    leader_node_UUID = 9;
  string    OS = 10;
  string    subnet_name = 11;
  google.protobuf.Timestamp create_at = 12;
}

// Piano
message Series {
  int64 time = 1;
  int64 value = 2;
}

message Telegraf {
  string    metric = 1;
  string    sub_metric = 2;
  string    UUID = 3;
  repeated Series series = 4;
}

// Viola
message NormalAction {
}

message HccAction {
  string    action_area = 1;
  string    action_class = 2;
  string    action_scope = 3;
  string    IPrange = 4;
  string    server_UUID = 5;
}

message Action {
  string          action_type = 1;
  NormalAction    normal_action = 2;
  HccAction       hcc_action = 3;
  string          action_result = 4;
}

message Control {
  Action action = 1;
  string publisher = 2;
  string receiver = 3;
}

message Controls {
  repeated Control control = 1;
}
