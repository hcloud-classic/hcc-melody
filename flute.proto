// Copyright 2020 by YounSeok.Shim and ish.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package RpcFlute;

import public "msgType.proto";
import "graphql.proto";

service Flute {
  option (graphql.service) = {
    host: "192.168.110.10:7000"
    insecure: true
  };

  // Node
  rpc CreateNode (ReqCreateNode) returns (ResCreateNode) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_node"
    };
  }
  rpc GetNode (ReqGetNode) returns (ResGetNode) {
    option (graphql.schema) = {
      type: QUERY
      name: "node"
    };
  }
  rpc GetNodeList (ReqGetNodeList) returns (ResGetNodeList) {
    option (graphql.schema) = {
      type: QUERY
      name: "node_list"
    };
  }
  rpc GetNodeNum (MsgType.Empty) returns (ResGetNodeNum) {
    option (graphql.schema) = {
      type: QUERY
      name: "node_num"
    };
  }
  rpc UpdateNode (ReqUpdateNode) returns (ResUpdateNode) {
    option (graphql.schema) = {
      type: MUTATION
      name: "update_node"
    };
  }
  rpc DeleteNode (ReqDeleteNode) returns (ResDeleteNode) {
    option (graphql.schema) = {
      type: MUTATION
      name: "delete_node"
    };
  }
  // NodeDetail
  rpc CreateNodeDetail (ReqCreateNodeDetail) returns (ResCreateNodeDetail) {
    option (graphql.schema) = {
      type: MUTATION
      name: "create_node_detail"
    };
  }
  rpc GetNodeDetail (ReqGetNodeDetail) returns (ResGetNodeDetail) {
    option (graphql.schema) = {
      type: QUERY
      name: "node_detail"
    };
  }
  rpc DeleteNodeDetail (ReqDeleteNodeDetail) returns (ResDeleteNodeDetail) {
    option (graphql.schema) = {
      type: MUTATION
      name: "delete_node_detail"
    };
  }
  // IPMI
  rpc NodePowerControl (ReqNodePowerControl) returns (ResNodePowerControl) {
    option (graphql.schema) = {
      type: MUTATION
      name: "node_power_control"
    };
  }
  rpc GetNodePowerState (ReqNodePowerState) returns (ResNodePowerState) {
    option (graphql.schema) = {
      type: QUERY
      name: "node_power_state"
    };
  }
}

// Node
message ReqCreateNode {
  MsgType.Node node = 1;
}

message ResCreateNode {
  MsgType.Node node = 1;
}

message ReqGetNode {
  string UUID = 1;
}

message ResGetNode {
  MsgType.Node node = 1;
}

message ReqGetNodeList {
  MsgType.Node node = 1;
  int64 row = 2;
  int64 page = 3;
}

message ResGetNodeList {
  repeated MsgType.Node node = 1;
}

message ResGetNodeNum {
  int64 num = 1;
}

message ReqUpdateNode {
  MsgType.Node node = 1;
}

message ResUpdateNode {
  MsgType.Node node = 1;
}

message ReqDeleteNode {
  string UUID = 1;
}

message ResDeleteNode {
  string UUID = 1;
}

// NodeDetail
message ReqCreateNodeDetail {
  MsgType.NodeDetail node_detail = 1;
}

message ResCreateNodeDetail {
  MsgType.NodeDetail node_detail = 1;
}

message ReqGetNodeDetail {
  string nodeUUID = 1;
}

message ResGetNodeDetail {
  MsgType.NodeDetail node_detail = 1;
}

message ReqDeleteNodeDetail {
  string nodeUUID = 1;
}

message ResDeleteNodeDetail {
  string nodeUUID = 1;
}

// IPMI
enum PowerState {
  ON = 0;
  OFF = 1;
  FORCE_OFF = 2;
  FORCE_RESTART = 3;
}

message ReqNodePowerControl {
  repeated MsgType.Node node = 1;
  PowerState power_state = 2;
}

message ResNodePowerControl {
  repeated string result = 1;
}

message ReqNodePowerState {
  string UUID = 1;
}

message ResNodePowerState {
  string result = 1;
}
